"""need imports"""
import string


def remove_punctuation(text):
    """Удаляет все знаки препинания из текста и возвращает очищенную строку."""
    # Переменная: объединение стандартных знаков препинания с русскими символами
    punctuation = string.punctuation + "—«»…"
    clean_text = text  # Оператор присваивания: начальное значение очищенного текста
    # Оператор цикла: перебор каждого знака препинания
    for char in punctuation:
        # Оператор присваивания: замена знака на пустую строку
        clean_text = clean_text.replace(char, "")
    return clean_text  # Возвращает результат функции


def find_number_vowels(text):
    """Подсчитывает количество гласных букв в тексте."""
    vowels = [
        "а", "е", "ё", "и", "о", "у", "ы", "э", "ю", "я"
    ]  # Переменная: список гласных букв русского языка для подсчета гласных
    sum_number_vowels = 0  # Переменная: счетчик гласных, инициализируется нулем
    # Оператор цикла: перебор каждой гласной буквы
    for char in vowels:
        # Оператор присваивания: увеличение счетчика на количество вхождений гласной
        sum_number_vowels += text.count(char)
    return sum_number_vowels  # Возвращает общее количество гласных


def find_number_prepositions(text):
    """Подсчитывает количество предлогов в тексте."""
    prepositions = [
        "в", "с", "у", "о", "к", "от", "до", "на", "по", "со", "из", "над", "под",
        "при", "про", "без", "ради", "близ", "перед", "около", "через", "вдоль",
        "после", "кроме", "сквозь", "вроде", "вследствие", "благодаря", "вопреки",
        "согласно", "навстречу"
    ]  # Переменная: список предлогов для использования в функции подсчета предлогов
    number_prepositions = 0  # Переменная: счетчик предлогов, инициализируется нулем\
    # Оператор присваивания: очищение текста от знаков препинания
    clean_text = remove_punctuation(text)
    words = clean_text.split(" ")  # Оператор преобразования: разделение текста на слова по пробелам
    for word in words:  # Оператор цикла: перебор каждого слова
        if word in prepositions:  # Условный оператор: проверка, является ли слово предлогом
            number_prepositions += 1  # Оператор присваивания: увеличение счетчика при совпадении
    return number_prepositions  # Возвращает общее количество предлогов


def main():
    """Основная функция программы для анализа текста."""
    flag_1 = True  # Переменная: флаг для управления внешним циклом, инициализируется как True
    name_file = "text.txt"  # Переменная: имя файла по умолчанию
    while flag_1:  # Оператор цикла: выполнение до изменения флага
        initial_text = ""
        # Переменная: строка для хранения исходного текста, инициализируется пустой
        initial_choice = input(
            f"Добро пожаловать в анализатор текста!\n"
            f"введите 1 если хотите ввести строчку в ручную и "
            f"2 если хотите ввести название файла (изначально {name_file}) и "
            f"3 если хотите выйти: ")
        # Оператор преобразования: ввод пользователя сохраняется как строка
        if not (len(initial_choice) == 1 and initial_choice in "123"):
            # Условный оператор: проверка, что выбор не совпадает ни с одним допустимым значением
            print("Вы ввели неправильный номер\n")
            continue  # Оператор цикла: переход к следующей итерации
        if initial_choice == "3":  # Условный оператор: выход из программы
            print("Пока!\n")
            flag_1 = False  # Оператор присваивания: изменение флага для завершения цикла
            continue  # Оператор цикла: завершение текущей итерации
        if initial_choice == "1":  # Условный оператор: ввод текста вручную
            initial_text = input("Введите текст: ")
            # Оператор присваивания: сохранение введенного текста
        else:  # Условный оператор: чтение текста из файла
            current_name_file = input(
                f"Введите название файла (можно оставить пустым, "
                f"тогда будет использоваться изначальное значение {name_file}): ")
            # Оператор преобразования: ввод имени файла как строки
            if current_name_file != "":  # Условный оператор: проверка, введено ли имя файла
                try:  # Условный оператор: обработка исключений
                    # Использование with
                    with open(current_name_file, "r", encoding="utf-8") as my_file:
                        # Оператор преобразования: чтение файла и замена переносов
                        initial_text = my_file.read().replace("\n", " ")
                except FileNotFoundError:  # Условный оператор: обработка ошибки
                    print("Не существует такого файла\n")
                    continue  # Оператор цикла: переход к следующей итерации
            else:  # Условный оператор: использование файла по умолчанию
                try:  # Условный оператор: обработка исключений
                    # Использование with
                    with open(name_file, "r", encoding="utf-8") as my_file:
                        # Оператор преобразования: чтение файла и замена переносов
                        initial_text = my_file.read().replace("\n", " ")
                except FileNotFoundError:  # Условный оператор: обработка ошибки
                    print("Не существует такого файла\n")
                    continue  # Оператор цикла: переход к следующей итерации
            print(f"Введенный текст: {initial_text}\n")  # Оператор вывода: отображение текста
        if len(initial_text) < 3:  # Условный оператор: проверка длины текста
            print("Слишком короткий текст\n")
            continue  # Оператор цикла: переход к следующей итерации
        initial_text = initial_text.lower()
        # Оператор преобразования: приведение текста к нижнему регистру
        flag_2 = True  # Переменная: флаг для управления внутренним циклом
        while flag_2:  # Оператор цикла: выполнение до изменения флага
            print("Теперь мы можем приступить к выбору операции:\n"
                  "1 - Подсчет слов\n"
                  "2 - Подсчет символов\n"
                  "3 - Подсчет гласных букв\n"
                  "4 - Подсчет предлогов\n"
                  "5 - Выход")
            id_operation = input()  # Оператор преобразования: ввод выбора операции
            if id_operation not in "12345" or len(id_operation) != 1:
                # Условный оператор: проверка корректности ввода
                print("Вы ввели неправильный номер\n")
                continue  # Оператор цикла: переход к следующей итерации
            if id_operation == "1":  # Условный оператор: подсчет слов
                print(f"Количество слов в тексте: {len(initial_text.split(' '))}\n")
                # Оператор преобразования: разделение текста на слова и подсчет
                continue  # Оператор цикла: переход к следующей итерации
            if id_operation == "2":
                # Условный оператор: подсчет символов
                clean_text = remove_punctuation(initial_text)
                # Оператор присваивания: очистка текста
                clean_text = clean_text.replace(" ", "")
                # Оператор преобразования: удаление пробелов
                print(f"Количество символов кроме пробелов и "
                      f"знаков пунктуации {len(clean_text)}\n")
                continue  # Оператор цикла: переход к следующей итерации
            if id_operation == "3":  # Условный оператор: подсчет гласных
                print(f"Количество всех гласных букв в "
                      f"тексте {find_number_vowels(initial_text)}\n")
                # Оператор вызова функции: подсчет гласных
                continue  # Оператор цикла: переход к следующей итерации
            if id_operation == "4":  # Условный оператор: подсчет предлогов
                print(f"Количество всех предлогов в "
                      f"тексте {find_number_prepositions(initial_text)}\n")
                # Оператор вызова функции: подсчет предлогов
                continue  # Оператор цикла: переход к следующей итерации
            if id_operation == "5":  # Условный оператор: выход из внутреннего цикла
                flag_2 = False  # Оператор присваивания: изменение флага для завершения цикла
                continue  # Оператор цикла: завершение текущей итерации


if __name__ == '__main__':  # Условный оператор: запуск главной функции при прямом вызове скрипта
    main()  # Оператор вызова функции: запуск программы
